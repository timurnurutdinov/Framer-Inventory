@import 'actions/action-inventory.cocoascript'
@import 'actions/view-inventory.cocoascript'
@import 'actions/statistics-inventory.cocoascript'
@import 'actions/demo-inventory.cocoascript'

@import 'RegisterInventory.framework/HelloSketch.js'

var methodStartTime = nil
var debugFromCustomPluginPanel = false

var pluginPath = ""
var pluginVersion = ""
var currentDocument = nil
var currentSelection = nil


var userPresets = {
	myRetinaEnabled: 0,
  myRetinaString: "retina",
	myMinimalExport: 1,
	myRelativeGroup: 0,
	myDetailedNotation: 1,
	exportFramerFolder: "",
	myDevice: 0,
	myCodeStyle: 0,

	myRetinaValue: 1,
	myMobile: 1,
	myAutoplay: 0,

	myEmail: "",
	myLicense: "",
	myRegisterDate: "",

	myUserID:  [[NSUUID UUID] UUIDString] + ""
}



var statisticsPresets = {
    currentStatus: 0,
    prevStatus: 0,
    toolbar: 0,
    testing: 0,
    debug: 0,

		actionSummary: 0
}



function Status () {}

Status.waitingID = function() { return -1 }
Status.replicateID = function() { return 0 }
Status.generateID = function() { return 1 }
Status.simulateID = function() { return 2 }
Status.settingsID = function() { return 3 }
Status.removePageID = function() { return 4 }
Status.showFolderID = function() { return 5 }
Status.selectFolderID = function() { return 6 }
Status.removeFolderID = function() { return 7 }
Status.toolbarID = function() { return 8 }
Status.updateID = function() { return 9 }


Status.userDomain = function() { return "com.addleimb.framer-inventory.user-production" }
Status.statsDomain = function() { return "com.addleimb.framer-inventory.statistics-production" }
Status.datesDomain = function() { return "com.addleimb.framer-inventory.dates-production" }

var preTestingDefaults = {}
var userDefaults = initDefaults(Status.userDomain(), userPresets)
var statsDefauls = initDefaults(Status.statsDomain(), statisticsPresets)


Status.toolbarModeEmpty = function() { return 0 }
Status.toolbarModeImport = function() { return 1 }
Status.toolbarModeScene = function() { return 2 }



var showLog = true
var showTestLog = true
var sendLog = true

var isSmartAction = false

var decomposeContext = function(context) {
		pluginVersion = context.plugin.version()
		pluginPath = context.scriptPath.substring(0, context.scriptPath.lastIndexOf("/"))
		currentDocument = context.document
		currentSelection = context.document.selectedLayers().layers()

		methodStartTime = [NSDate date]
}

var onReplicateLayersRun = function(context) {
	if (showLog) { log("Running Replicate Layers") }
	decomposeContext(context)
	runReplicateLayers()
}

var onGenerateStatesRun = function(context) {
	if (showLog) { log("Running Generate States") }
	decomposeContext(context)
	runGenerateStates()
}

var onSimulateKeynoteRun = function(context) {
	if (showLog) { log("Running Simulate Keynote") }
	decomposeContext(context)
	runSimulateKeynote()
}

var onSettingRun = function(context) {
	if (showLog) { log("Running Settings") }
	decomposeContext(context)
	runSettings()
}

var onRemoveExportPageRun = function(context) {
	if (showLog) { log("Running Remove Export Page...") }
	decomposeContext(context)
	FramerInventory.showDoneMessage()
}

var onShowBarRun = function(context) {
	if (showLog) { log("Showing Bar") }
	decomposeContext(context)
	ToolbarInventory.createUIBar()
}


var onSelectOpenedProjectRun = function(context) {
	if (showLog) { log("Running Select Opened Project...") }
	decomposeContext(context)
	PathInventory.createPathModal()
}

var onSelectProjectFolderRun = function(context) {
	if (showLog) { log("Running Select Project Manually...") }
	decomposeContext(context)
	FramerInventory.runSelectProjectFolder()
}

var onRemoveProjectFolderRun = function(context) {
	if (showLog) { log("Running Remove Project Folder...") }
	decomposeContext(context)
	FramerInventory.runRemoveProjectFolder()
}

var onShowProjectFolderRun = function(context) {
	if (showLog) { log("Running Show Project Folder...") }
	decomposeContext(context)
	FramerInventory.runShowProjectFolder()
}

var onCheckUpdatesRun = function(context) {
	if (showLog) { log("Running Updates Checker") }
	decomposeContext(context)
	runCheckUpdates()
}



var onTestingRun = function(context) {
	if (showLog) { log("Running Testing Environment") }
	// isTestingEnvironment = true
	// sendLog = false
	decomposeContext(context)
	runTestingEnvironment()
	// chooseAction(currentDocument, currentSelection, runTestingEnvironmentIdentifier)
}
